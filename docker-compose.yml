services:

  awt-docs:
    build:
      context: docs/.
      dockerfile: local-dev.Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./docs:/app/src
      - vitepress_dist:/app/src/.vitepress/dist
      - node_modules:/app/src/node_modules
    env_file:
      - .env.local-dev

  awt-tile-cache:
    build: tile_caching
    volumes:
      - ./tile_caching/cache:/data/nginx/cache
    env_file:
      - .env.local-dev

  awt-mapfish-print-server:
    build: mapfish_print_server/.
    ports:
      - "8080:8080"
    depends_on:
      - awt-tile-cache
    env_file:
      - .env.local-dev
    healthcheck:
      test: "curl -f http://localhost:8080"
      interval: 2s
      timeout: 1s
      retries: 60

  awt-swiss-tml-api:
    build:
      context: swiss_TLM_api/.
      dockerfile: local-dev.Dockerfile
    ports:
      - "1848:1848"
    volumes:
      - ./swiss_TLM_api:/app
    env_file:
      - .env.local-dev
    healthcheck:
      test: "curl -f http://localhost:1848/ready | grep 'ready'"
      interval: 5s
      timeout: 1s
      retries: 180

  awt-backend:
    build:
      context: backend/.
      dockerfile: local-dev.Dockerfile
    ports:
      - "5000:5000"

    volumes:
      - ./backend:/app

    depends_on:
      awt-mapfish-print-server:
        condition: service_healthy
      awt-swiss-tml-api:
        condition: service_healthy

    environment:
      TZ: Europe/Zurich
    env_file:
      - .env.local-dev

  awt-frontend:
    build:
      context: .
      dockerfile: frontend/local-dev.Dockerfile
      # Used in the first stage of the Dockerfile, thus these env vars must be passed as args
      args:
        - ENVIRONMENT_FILE=.env.local-dev
    volumes:
      - ./frontend/src:/app/src
      # Mount git info to container
      - ./.git/HEAD:/app/.git/HEAD
      - ./.git/refs/heads/:/app/.git/refs/heads/
    ports:
      - "80:80"
    depends_on:
      - awt-backend
      - awt-valhalla
    env_file:
      - .env.local-dev
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost || exit 1"
      interval: 5s
      timeout: 1s
      retries: 180

  awt-valhalla:
    build:
      context: ./route_engine
      dockerfile: dev.Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./route_engine/sources/:/custom_files
    environment:
      # - tile_urls=https://download.geofabrik.de/europe/switzerland-latest.osm.pbf
      - server_threads=2  # determines how many threads will be used to run the valhalla server
      - use_tiles_ignore_pbf=True  # load existing valhalla_tiles.tar directly
      - build_elevation=False  # build elevation with "True" or "Force": will download only the elevation for areas covered by the graph tiles
      - build_admins=False  # build admins db with "True" or "Force"
      - build_time_zones=False  # build timezone db with "True" or "Force"
      - build_tar=True  # build an indexed tar file from the tile_dir for faster graph loading times
      - force_rebuild=False  # forces a rebuild of the routing tiles with "True"
    env_file:
      - .env.local-dev

volumes:
  vitepress_dist: {}
  node_modules: {}
