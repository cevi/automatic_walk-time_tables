services:

  awt-cypress:

    build:
      context: ./e2e
      dockerfile: Dockerfile

    depends_on:
      awt-frontend:
        condition: service_healthy

    entrypoint: cypress run --browser chrome

    # share the current folder as volume to avoid copying
    working_dir: /opt/e2e
    volumes:
      - ./e2e:/opt/e2e

    env_file:
      - .env.ci-testing

  awt-docs:

    build:
      context: docs/.
      dockerfile: Dockerfile

    env_file:
      - .env.ci-testing

    logging:
      driver: none

  awt-tile-cache:
    env_file:
      - .env.ci-testing

    logging:
      driver: none

  awt-mapfish-print-server:

    env_file:
      - .env.ci-testing
    
    logging:
      driver: none

  awt-swiss-tml-api:

    build:
      context: swiss_TLM_api/.
      dockerfile: Dockerfile

    env_file:
      - .env.ci-testing

    logging:
      driver: none

  awt-backend:

    build:
      context: backend/.
      dockerfile: Dockerfile

    env_file:
      - .env.ci-testing

    logging:
      driver: none

  awt-frontend:

    build:
      context: .
      dockerfile: frontend/Dockerfile
      # Used in the first stage of the Dockerfile, thus these env vars must be passed as args
      args:
        - ENVIRONMENT_FILE=.env.ci-testing

    env_file:
      - .env.ci-testing

    logging:
      driver: none

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 2s
      timeout: 1s
      retries: 60

  awt-valhalla:
    build:
      context: ./route_engine
      dockerfile: Dockerfile
    environment:
      # - tile_urls=https://download.geofabrik.de/europe/switzerland-latest.osm.pbf
      - server_threads=2  # determines how many threads will be used to run the valhalla server
      - use_tiles_ignore_pbf=True  # load existing valhalla_tiles.tar directly
      - build_elevation=False  # build elevation with "True" or "Force": will download only the elevation for areas covered by the graph tiles
      - build_admins=False  # build admins db with "True" or "Force"
      - build_time_zones=False  # build timezone db with "True" or "Force"
      - build_tar=True  # build an indexed tar file from the tile_dir for faster graph loading times
      - force_rebuild=False  # forces a rebuild of the routing tiles with "True"
    env_file:
      - .env.ci-testing

  awt-store-api:
    build:
      context: ./store_api
      dockerfile: Dockerfile
    env_file:
      - .env.ci-testing

  awt-mongodb:
    env_file:
      - .env.ci-testing